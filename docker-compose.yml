version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: marta_postgres
    environment:
      POSTGRES_DB: marta_db
      POSTGRES_USER: marta_user
      POSTGRES_PASSWORD: marta_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/real_marta_schema.sql:/docker-entrypoint-initdb.d/02-real-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marta_user -d marta_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - marta_network

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: marta_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - marta_network

  # MARTA Optimization API
  marta_api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: marta_api
    environment:
      - DB_HOST=postgres
      - DB_NAME=marta_db
      - DB_USER=marta_user
      - DB_PASSWORD=marta_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8001:8001"
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./optimization_results:/app/optimization_results
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - marta_network
    restart: unless-stopped

  # MARTA Dashboard
  marta_dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: dashboard
    container_name: marta_dashboard
    environment:
      - DB_HOST=postgres
      - DB_NAME=marta_db
      - DB_USER=marta_user
      - DB_PASSWORD=marta_password
      - API_URL=http://marta_api:8001
    ports:
      - "8501:8501"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      marta_api:
        condition: service_healthy
    networks:
      - marta_network
    restart: unless-stopped

  # Data Ingestion Service
  marta_ingestion:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: marta_ingestion
    environment:
      - DB_HOST=postgres
      - DB_NAME=marta_db
      - DB_USER=marta_user
      - DB_PASSWORD=marta_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "run_ingestion.py"]
    networks:
      - marta_network
    restart: unless-stopped

  # Data Processing Service
  marta_processing:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: marta_processing
    environment:
      - DB_HOST=postgres
      - DB_NAME=marta_db
      - DB_USER=marta_user
      - DB_PASSWORD=marta_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "run_data_processing.py"]
    networks:
      - marta_network
    restart: unless-stopped

  # Model Training Service
  marta_training:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: marta_training
    environment:
      - DB_HOST=postgres
      - DB_NAME=marta_db
      - DB_USER=marta_user
      - DB_PASSWORD=marta_password
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "run_model_training.py"]
    networks:
      - marta_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: marta_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - marta_api
      - marta_dashboard
    networks:
      - marta_network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: marta_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - marta_network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: marta_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - marta_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  marta_network:
    driver: bridge 